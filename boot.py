import sqlite3
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import TOKEN

# Connect to SQLite database
DB_FILE = "earnlink.db"
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()

def get_referral_count(user_id):
    """Returns the number of people a user has referred."""
    cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    return count
# Create tables if they don't exist
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id TEXT PRIMARY KEY,
    balance INTEGER DEFAULT 0,
    referrer_id TEXT
)
''')
# Create referrals table if not exists
cursor.execute('''
CREATE TABLE IF NOT EXISTS referrals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT UNIQUE,
    referrer_id TEXT
)
''')

conn.commit()

MIN_WITHDRAW_AMOUNT = 1000  # 40 invites * 25 ETB


def save_user(user_id):
    """Ensures a user is registered in the database."""
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()


def add_referral(user_id, referrer_id):
    """Registers a referral and adds the reward to the referrer."""
    cursor.execute("SELECT referrer_id FROM users WHERE user_id = ?", (user_id,))
    referrer = cursor.fetchone()

    if not referrer or not referrer[0]:  # If user hasn't been referred yet
        cursor.execute("UPDATE users SET referrer_id = ? WHERE user_id = ?", (referrer_id, user_id))
        cursor.execute("UPDATE users SET balance = balance + 25 WHERE user_id = ?", (referrer_id,))
        conn.commit()
        return True
    return False

async def start(update: Update, context: CallbackContext):
    """Handles the /start command and referral tracking"""
    user_id = str(update.message.from_user.id)
    args = context.args

    save_user(user_id)  # Ensure user is registered

    if args:
        referrer_id = args[0]
        if referrer_id.isdigit():
            referrer_id = str(referrer_id)
            if referrer_id != user_id and add_referral(user_id, referrer_id):
                await update.message.reply_text(f"­ЪјЅ You were referred by user {referrer_id}! They earned 25 ETB.")

    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    await update.message.reply_text(
          f"Welcome to EarnLinkBot! ­Ъџђ\n"
        f"­ЪјЂ рѕ░рѕІрѕЮ рІѕрІх {update.effective_user.first_name} ріЦріЋрі│ріЋ рЅарІ░рѕЁріЊ рѕўрїА ::  business рЅдрЅхріЋ рЅарѕўрїарЅђрѕЮ рЅЦрЅ╗ рЅарІѕрѕГ ріе20,000 рЅЦрѕГ рЅарѕІрІГ рЅ░ріерЇІрІГ рѕўрѕєріЋ рІГрЅйрѕІрѕЅ!\n\n"
      f"­ЪЉг рІѕрІ░рІџрѕЁ рЅдрЅх рѕЇріГ ріЦріЋрІ░рїѕрЅА рІе100 рЅЦрѕГ рѕхрїдрЅ│ рІФрїѕріЏрѕЅ рЅарЅ░рїерѕЏрѕфрѕЮ 1 рѕ░рІЅ рІѕрІ░ рЅдрЅ▒ рѕ▓рїІрЅЦрІЎ рЅарІерЅђріЉ рІе25 рЅЦрѕГ рЅІрѕџ ріГрЇЇрІФ рІФрїѕріЏрѕЅрЇб\n\n"
      f"­ЪЉц рІеріЦрѕГрѕХ рѕўрїІрЅарІБ рѕіріЋріГ ­ЪЉЅ {referral_link}\n"
    
        f"­ЪЉЦ ріЦрѕхріФрѕЂріЋ рІерїІрЅарІЎрЅх рѕ░рІЇ рѕўрїаріЋ ­ЪЉЅ {get_referral_count(user_id)} рѕ░рІЇ ріљрІЇ ::\n\n"
         f"РўЉ№ИЈ рІГрѕЁ рІеріЦрѕГрѕХрІј рѕўрїІрЅарІБ рѕіріЋріГ ріљрІЇ рѕѕрІѕрІ│рїЁ рІўрѕўрІхрІј рІФрїІрѕЕ рІЏрѕгрІЇріЉ рїѕріЋрІўрЅЦ рѕўрѕхрѕФрЅх рІГрїђрѕЮрѕЕрЇб\n"
        f"Invite friends using your unique referral link:\n"
        f"{referral_link}\n\n"
        
        f"­ЪјЅ if You were referred by user ! They earned 25 ETB."
    )
    await update.message.reply_text(f"""рІерЅ░рїарЅЃрѕџ рѕхрѕЮ: {update.effective_user.first_name}
рЅдрЅ│рЅйріЋріЋ рЅарѕўрЅђрѕІрЅђрѕѕрІј рІерЅ░рѕИрѕѕрѕЎрЅх рІерїѕріЋрІўрЅЦ рѕўрїаріЋ : 15,000 ETB 

рІЅрІх {update.effective_user.first_name} ріарѕЂріЉріЉ рЇѕрїЦріљрІЅ рїЇрѕЕрЇЊрЅйріЋ рѕІрІГ ріарІх рЅарѕЏрІхрѕерїЇ рїѕріЋрІўрЅдрІјрЅхріЋ рІГрЅђрЅарѕЅРюЁ

ріарІх рѕѕрѕЏрІхрѕерїЇ­ЪЉЄ­ЪЉЄ­ЪЉЄ
https://t.me/gift_yshelemu_1
https://t.me/gift_yshelemu_1
https://t.me/gift_yshelemu_1

рѕЏрѕ│рѕ░рЅбрІФ Add ріарІхрѕГрїѕрІЇ ріерїерѕерѕ▒ рЅдрѕђрѕІ рІГрѕЁріЋ рѕўрѕЇрІЋріГрЅх рѕѕ 20рѕ░рІЇ share рѕЏрІхрѕерїЇ ріарѕѕрЅдрІјрЅх 



рѕўрѕЇріФрѕЮ ріЦрІхрѕЇ 
­ЮЪ«­ЮЪг­ЮЪГ7
Thank you very much""")
    await menu(update, context)  # Show the menu automatically


async def menu(update: Update, context: CallbackContext):
    """Displays the menu with buttons."""
    keyboard = [
        ["рЅђрѕф рѕѓрѕ│рЅЦ ­Ъњ░", "­ЪњгрІерїІрЅарІЎрЅх рѕ░рІЇ рѕўрїаріЋ ­Ъњх"],
        ["рѕ░рІЇ рѕѕрѕўрїІрЅарІЮ ­ЪЉц", "рѕйрѕЇрѕЏрЅх рѕѕрѕўрЅђрЅарѕЇ"],
        ["    ріарѕ░рѕФрѕГРЎд№ИЈРЎд№ИЈ   "],["    РюЁрѕхрѕѕ рІхрѕГрїЁрЅ▒ рѕЏрЅЦрѕФрѕфрІФРё╣№ИЈ   "]
        
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("­Ъћй Choose an option below:", reply_markup=reply_markup)


async def show_instructions(update: Update, context: CallbackContext):
    """Sends the instructions when the button is clicked."""
    await update.message.reply_text(
        "­Ъј» ­ЪЉцрѕ░рІЇ рѕѕрѕўрїІрЅарІЮ рІерѕџрѕѕрІЇріЋ рЅарѕўріЋріФрЅх рЅарѕџрѕІріГрѕјрІјрЅх рІерѕфрЇѕрѕФрѕЇ рІѕрІГрѕЮ рѕ░рІЇ рІерѕўрїІрЅарІБ рѕіріЋріГ "
        "рѕѕ рѕ░рІјрЅй рЅарѕўрѕІріГ ріЦріЊ рЅарѕўрїІрЅарІЮ рїѕріЋрІўрЅЦ рѕўрѕхрѕФрЅх рІГрЅйрѕІрѕЅ рЇАрЇА "
        "рІерѕўрїІрЅарІБрІЇріЋ рѕіріЋріГ рІерѕІріЕрѕѕрЅх рѕ░рІЇ рѕхрЅ│рѕГрЅх рѕЏрѕѕрЅх рІГріќрѕГрЅарЅ│рѕЇрЇб\n\n"
        "рІеріЦрїЁ рѕхрѕЇріГрІјріЋ рЅЦрЅ╗ рЅарѕўрїарЅђрѕЮ рЅЦрЅ╗ ріЦрѕхріе 50рѕ║ рЅЦрѕГ рІГрѕхрѕЕ­ЪјЅ\n"
        "рѕўрѕЇріФрѕЮ ріЦрІхрѕЇ"
    )

async def send_about_agency(update: Update, context: CallbackContext):
    message = """­ЪЌ»рІГрѕЁ  ріцрїђріЋрѕ▓ рЅарЅЁріЋ рібрЅхрІ«рї▓рІФрІЇріЋ рЅБрѕѕрѕђрЅЦрЅХрЅй рІерЅ░рІ░рѕФрїђ рІерЅарїј ріарІхрѕГрїјрЅх рІхрѕГрїЁрЅх ріљрІЇ ! 

­ЪЌ»рІерІџрѕЁ рІхрѕГрїЁрЅх ріарѕІрѕЏ рЅаPromotion Express рѕЏрѕхрЅ│рІѕрЅѓрІФ рібрЅхрІ«рї▓рІФрІЇріЋріЋ рѕѕрѕўрѕГрІ│рЅх ріљрІЇ рЇб 
рЅарЅ░рїерѕЏрѕфрѕЮ рЅарѕЮріЋрІЏрѕг рібрЅхрІ«рї▓рІФ ріЦріЋрІ│рЅхрЅИрїѕрѕГ рІГрѕерІ│рѕЇрЇб­ЪћІ

­ЪЌ»рІхрѕГрїЁрЅ│рЅйріЋ рїѕріЋрІўрЅАріЋ рІерѕџрІФріерЇЇрЇЇрѕѕрІЇ рЅаtelegram Platform рѕ▓рѕєріЋ рѕ░рІЇ рІѕрІ░ рЅдрЅ▒ рЅарѕўрїІрЅарІЮ  рЅЦрЅ╗ рЅарЅхріЋрѕ╣ ріе 500$[50рѕ║ ETB] ріЦрѕхріе 1000$ [100рѕ║ ETB]­Ъњх­Ъњх­Ъњх­Ъњх
рѕЏріЋріЏрІЇрѕЮ рѕ░рІЇ рѕўрѕхрѕФрЅх рІГрЅйрѕІрѕЇ рЇб

­ЪЌ»рїѕріЋрІўрЅАріЋ рѕўрЅђрЅарІФ рѕўріЋрїѕрІх рЅарЅБріЋріГ рѕ▓рѕєріЋ
ріарЅЦрѕерІЇріЋрѕЮ - ­ЪЪфрІерібрЅхрІ«рї▓рІФ ріЋрїЇрІх рЅБріЋріГ
                  - ­ЪЪеріарЅбрѕ▓ріњрІФ рЅБріЋріГ
                  - ­ЪЪдріарІІрѕй рЅБріЋріГ
┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а - ­ЪЈД рЅ┤рѕї рЅЦрѕГ
┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а - ­ЪЪДрІѕрїІрїѕріЋ рЅБріЋріГ
┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а┬а - ­ЪЪФ рІ│рѕйріЋ рЅБріЋріГ 
­ЪЌ»ріерѕІрІГ ріерЅ░рїарЅђрѕ▒рЅх рЅаріаріЋрІ▒ рЅБріЋріГ рІерѕ░рЅарѕ░рЅАрЅхріЋ рїѕріЋрІўрЅЦ рІѕрїф рѕЏрІхрѕерїЇ рІГрЅйрѕІрѕЅ рЇА 

┬а┬а┬а┬а ­ЪјѕрѕўрѕЇріФрѕЮ ріЦрІхрѕЇ ­Ъјі
Long live for Ethiopia­ЪЊ»­ЪЄф­ЪЄ╣"""

    await update.message.reply_text(message)


async def check_balance(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
    
    balance = result[0] if result else 0  # Default to 0 if no record exists

    await update.message.reply_text(
        f"­ЪЉц рІерЅ░рїарЅЃрѕџ рѕхрѕЮ: {update.effective_user.first_name} \n"
        f"­ЪјЂ рІерЅдріљрѕх рѕхрїдрЅ│: 100 рЅЦрѕГ\n"
        f"­Ъњх рІФрѕјрЅх рЅђрѕф рѕњрѕ│рЅЦ: {balance} + 100 рЅЦрѕГ\n"
        f"­ЪЊі рїарЅЁрѕІрѕІ рѕѓрѕ│рЅЦ: {balance + 100} рЅЦрѕГ"
    )



async def get_referrals(update: Update, context: CallbackContext):
    """Shows a list of users the person referred."""
    user_id = str(update.message.from_user.id)
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    cursor.execute("SELECT user_id FROM users WHERE referrer_id = ?", (user_id,))
    referred_users = [row[0] for row in cursor.fetchall()]

    if referred_users:
        await update.message.reply_text(
        f"""­ЪџђрІерїІрЅарІЎрЅх рІерѕ░рІЇ рѕўрїаріЋ
= {get_referral_count(user_id)} рѕ░рІЇ
├Ќ 25ETB 

рІеріЦрѕГрѕХ рѕўрїІрЅарІБ рѕіріЋріГ ­ЪћЌ 
{referral_link}"""
        )
    else:
        await update.message.reply_text("­ЪЎЂ You haven't referred anyone yet.")
        



async def get_referral_link(update: Update, context: CallbackContext):
    """Generates a unique referral link for the user."""
    user_id = str(update.message.from_user.id)
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    await update.message.reply_text( f"""РюЊрІЇрІх {update.effective_user.first_name}
­ЪЉг рІѕрІ░ рібрЅхрІ« рідріЋрѕІрІГріЋ рѕхрѕФ рЅдрЅх рѕЇріГ ріЦріЋрІ░рїѕрЅА рІе100 рЅЦрѕГ рѕхрїдрЅ│ рІФрїѕріЏрѕЅ рЅарЅ░рїерѕЏрѕфрѕЮ 1 рѕ░рІЅ рІѕрІ░ рЅдрЅ▒ рѕ▓рїІрЅЦрІЎ рЅарІерЅђріЉ рІе25 рЅЦрѕГ рЅІрѕџ ріГрЇЇрІФ рІФрїѕріЏрѕЅ

­ЪЉцрІеріЦрѕГрѕХ рѕўрїІрЅарІБ рѕіріЋріГ ­ЪЉЅ {referral_link}
­ЪЉЦріЦрѕхріФрѕЂріЋ рІерїІрЅарІЎрЅх рѕ░рІЇ рѕўрїаріЋ ­ЪЉЅ {get_referral_count(user_id)} рѕ░рІЇ ріљрІЇ!

"""
    )


async def withdraw(update: Update, context: CallbackContext):
    """Allows users to withdraw if they have 40 referrals (1,000 ETB)."""
    user_id = str(update.message.from_user.id)
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    if balance >= MIN_WITHDRAW_AMOUNT:
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (MIN_WITHDRAW_AMOUNT, user_id))
        conn.commit()
        await update.message.reply_text(
            f"РюЁ Withdrawal request submitted! You will receive 1000 ETB soon.\n"
            f"Your new balance: {balance - MIN_WITHDRAW_AMOUNT} ETB"
            
        )
    else:
        await update.message.reply_text(
        f"""
­ЪјЂ рѕ░рѕІрѕЮ рІѕрІх {update.effective_user.first_name}, рЅарЅЁрІхрѕџрІФ ріЦріЋрі│ріЋ рЅарІ░рѕЁріЊ рѕўрїА ::┬а
рїѕріЋрІўрЅЦ рѕѕрѕўрЅђрЅарѕЇ **40 рѕ░рІјрЅйріЋ(1,000 ETB)** рІѕрІ░рІџрѕЁ рЅдрЅх рѕўрїІрЅарІЮ ріарѕѕрЅдрЅх┬а


­ЪЉЦ ріЦрѕхріФрѕЂріЋ рІерїІрЅарІЎрЅх рѕ░рІЇ рѕўрїаріЋ ­ЪЉЅ {get_referral_count(user_id)} рѕ░рІЇ ріљрІЇ рЇб

­ЪЊб **рѕЏрѕ│рѕ░рЅбрІФ:**  
Add ріарІхрѕГрїѕрІЇ ріерїерѕерѕ▒ рЅдрѕђрѕІ **рІГрѕЁріЋ рѕўрѕЇрІЋріГрЅх рѕѕ 20 рѕ░рІЇ share** рѕЏрІхрѕерїЇ ріарѕѕрЅдрІјрЅх рЇб
"""
)


async def handle_buttons(update: Update, context: CallbackContext):
    """Handles button clicks and calls the appropriate function."""
    text = update.message.text
    user_id = str(update.message.from_user.id)
    if text == "рЅђрѕф рѕѓрѕ│рЅЦ ­Ъњ░":
        await check_balance(update, context)
    elif text == "­ЪњгрІерїІрЅарІЎрЅх рѕ░рІЇ рѕўрїаріЋ ­Ъњх":
        await get_referrals(update, context)
    elif text == "ріарѕ░рѕФрѕГРЎд№ИЈРЎд№ИЈ" :
          await show_instructions(update, context)
    elif text == "рѕ░рІЇ рѕѕрѕўрїІрЅарІЮ ­ЪЉц":
        await get_referral_link(update, context)
    elif text == "РюЁрѕхрѕѕ рІхрѕГрїЁрЅ▒ рѕЏрЅЦрѕФрѕфрІФРё╣№ИЈ": # New button response
        await send_about_agency(update, context)
    elif text == "рѕйрѕЇрѕЏрЅх рѕѕрѕўрЅђрЅарѕЇ":
        await withdraw(update, context)
    else:
        await update.message.reply_text("РЮї Unknown Command!You have send a Message directly into the Bot's chat\n or\n Menu structure has been modified by Admin.\n Рё╣№ИЈ Do not send Messages directly to the Bot or\n reload the Menu by pressing /start")


def main():
    print("Starting the bot...")  # Debugging line
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))  # Handles button clicks

    print("Bot is running...")  # Debugging line
    app.run_polling()


if __name__ == "__main__":
    main()
